{"version":3,"sources":["environment.js","firebase.js","invoices.service.js","App.js","serviceWorker.js","index.js"],"names":["environment","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","invoicesRef","database","ref","confirm","Modal","columns","title","dataIndex","key","render","tag","color","toUpperCase","_","record","onClick","invoice","invoice_number","content","onOk","Promise","resolve","reject","id","status","options","method","headers","body","JSON","stringify","fetch","updateInvoiceStatus","objID","then","type","notification","message","description","openNotificationWithIcon","catch","reason","err","console","error","onCancel","App","useState","invoices","setInvoices","useEffect","on","snapshot","objects","val","hasOwnProperty","push","off","className","style","marginBottom","rowKey","dataSource","filter","reverse","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uUAaeA,G,OAbK,CAClBC,SAAU,CACRC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,kBCLnBR,IAASS,cAAcV,EAAYC,UAEpBA,QAAf,ECIaU,EAAcV,EAASW,WAAWC,IAAI,YCW3CC,G,4BAAYC,IAAZD,SAEFE,EAAU,CACd,CACEC,MAAO,YACPC,UAAW,kBAGb,CACED,MAAO,SACPE,IAAK,SACLD,UAAW,SACXE,OAAQ,SAAAC,GAAG,OACT,8BAEI,kBAAC,IAAD,CAAKC,MAAe,YAARD,EAAoB,UAAY,QAASF,IAAKE,GACvDA,EAAIE,kBAMf,CACEN,MAAO,QACPC,UAAW,SAEb,CACED,MAAO,WACPC,UAAW,YAEb,CACED,MAAO,eACPC,UAAW,gBAEb,CACED,MAAO,WACPC,UAAW,YAEb,CACED,MAAO,SACPC,UAAW,eAEb,CACED,MAAO,qBACPC,UAAW,sBAEb,CACED,MAAO,SACPE,IAAK,SACLC,OAAQ,SAACI,EAAGC,GACV,OACE,8BACE,kBAAC,IAAD,CAAQC,SAiBGC,EAjBkBF,EAkB9B,WACLX,EAAQ,CACNG,MAAM,uCAAD,OAAyCU,EAAQC,eAAjD,KACLC,QAAS,gCACTC,KAHM,WAIJ,OAAO,IAAIC,SAAQ,SAACC,EAASC,IDpFF,SAACC,EAAIC,GAEpC,IAAMC,EAAU,CACZC,OAAQ,QACRC,QAAS,CACL,OAAU,mBACV,eAAgB,kCAEpBC,KAAMC,KAAKC,UAAU,CACjBP,GAAIA,EACJC,OAAQA,KAIhB,OAAOO,MArBM,gEAqBUN,ICwEjBO,CAAoBhB,EAAQiB,MAAO,YAChCC,MAAK,YAnBe,SAACC,EAAMnB,GACtCoB,IAAaD,GAAM,CACjBE,QAAS,OACTC,YAAY,eAAD,OAAiBtB,EAAQC,eAAzB,oBAiBDsB,CAAyB,UAAWvB,GACpCK,OAEDmB,OAAM,SAACC,GACNnB,EAAOmB,SAGVD,OAAM,SAAAE,GACPC,QAAQC,MAAM,MAAOF,OAIzBG,SApBM,kBAnBF,YAiBV,IAAqB7B,KAwEN8B,MA7Cf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,KA+Bb,OA3BAC,qBAAU,WAoBR,OAlBAlD,EACGmD,GAAG,SAAS,SAACC,GAEZ,IAAIC,EAAUD,EAASE,MACnBN,EAAW,GAEf,IAAK,IAAIf,KAASoB,EACZA,EAAQE,eAAetB,IACzBe,EAASQ,KAAT,eACKH,EAAQpB,GADb,CAEEA,MAAOA,KAKbgB,EAAYD,MAGT,WAELhD,EAAYyD,SAGb,IAGD,yBAAKC,UAAU,OACb,wBAAIC,MAAO,CAAEC,aAAc,KAA3B,aACA,kBAAC,IAAD,CACEC,OAAQ,SAAA/C,GAAM,OAAIA,EAAOmB,OACzB6B,WAAYd,EACTe,QAAO,SAAA/C,GAAO,MAAuB,YAAnBA,EAAQQ,UAC1BwC,UACH3D,QAASA,MChJG4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS7D,OAAO,kBAAC,EAAD,MAAS8D,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,kB","file":"static/js/main.049a19b3.chunk.js","sourcesContent":["const environment = {\n  firebase: {\n    apiKey: \"AIzaSyBcAQUnpjDZElf9nZpqudNwBppcuj3xkfs\",\n    authDomain: \"fire2ulaundry.firebaseapp.com\",\n    databaseURL: \"https://fire2ulaundry.firebaseio.com\",\n    projectId: \"fire2ulaundry\",\n    storageBucket: \"fire2ulaundry.appspot.com\",\n    messagingSenderId: \"743773426222\",\n    appId: \"1:743773426222:web:cdda5441d54c1ea3c085bf\",\n    measurementId: \"G-7FWWWH0X45\"\n  }\n};\n\nexport default environment;\n","import firebase from \"firebase/app\";\nimport \"firebase/database\";\nimport environment from \"./environment\";\n\nfirebase.initializeApp(environment.firebase);\n\nexport default firebase;\n","import firebase from './firebase';\n\n/**\n * Api doc ref: https://github.com/romelgomez/2ulaundry-functions\n */\nconst endpoint = 'https://us-central1-fire2ulaundry.cloudfunctions.net/invoices';\n\n/**\n * Firebase invoices ref\n */\nexport const invoicesRef = firebase.database().ref('invoices');\n\nexport const updateInvoiceStatus = (id, status) => {\n\n    const options = {\n        method: 'PATCH',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json;charset=UTF-8'\n        },\n        body: JSON.stringify({\n            id: id,\n            status: status\n        })\n    };\n\n    return fetch(endpoint, options);\n}\n\nexport default invoicesRef;\n","// React | Antd | Verdors\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {\n  Table,\n  Modal,\n  Tag,\n  Button,\n  notification\n} from 'antd';\n\n// Services\nimport { invoicesRef, updateInvoiceStatus } from './invoices.service';\n\n// Styles\nimport 'antd/es/table/style/css';\nimport 'antd/es/tag/style/css';\nimport 'antd/es/modal/style/css';\nimport 'antd/es/notification/style/css';\n\n\nconst { confirm } = Modal;\n\nconst columns = [\n  {\n    title: 'Invoice #',\n    dataIndex: 'invoice_number'\n  },\n  // TODO: TO COMMENT, NOT REQUESTED\n  {\n    title: 'Status',\n    key: 'status',\n    dataIndex: 'status',\n    render: tag => (\n      <span>\n        {\n          <Tag color={tag === 'pending' ? 'volcano' : 'green'} key={tag}>\n            {tag.toUpperCase()}\n          </Tag>\n        }\n      </span>\n    )\n  },\n  {\n    title: 'Total',\n    dataIndex: 'total'\n  },\n  {\n    title: 'Currency',\n    dataIndex: 'currency'\n  },\n  {\n    title: 'Invoice Date',\n    dataIndex: 'invoice_date'\n  },\n  {\n    title: 'Due Date',\n    dataIndex: 'due_date'\n  },\n  {\n    title: 'Vendor',\n    dataIndex: 'vendor_name'\n  },\n  {\n    title: 'Remittance Address',\n    dataIndex: 'remittance_address'\n  },\n  {\n    title: 'Action',\n    key: 'action',\n    render: (_, record) => {\n      return (\n        <span>\n          <Button onClick={showConfirm(record)}>Approve</Button>\n        </span>\n      );\n    }\n  }\n];\n\nconst openNotificationWithIcon = (type, invoice) => {\n  notification[type]({\n    message: 'DONE',\n    description: `The invoce #${invoice.invoice_number} was Approved!`,\n  });\n};\n\n/**\n * showConfirm function is a closure that return a function that open an modal to Approve the invoice.\n */\nfunction showConfirm(invoice) {\n  return () => {\n    confirm({\n      title: `Do you want to Approve the invoice #${invoice.invoice_number}?`,\n      content: 'This action can\\'t be rollback',\n      onOk() {\n        return new Promise((resolve, reject) => {\n\n          updateInvoiceStatus(invoice.objID, 'Approved')\n            .then(() => {\n              openNotificationWithIcon('success', invoice);\n              resolve();\n            })\n            .catch((reason) => {\n              reject(reason);\n            });\n\n        }).catch(err => {\n          console.error('err', err);\n          // TODO: Show ERROR MESSAGE\n        });\n      },\n      onCancel() { }\n    });\n  };\n}\n\nfunction App() {\n  const [invoices, setInvoices] = useState([]);\n\n  // componentDidMount\n  useEffect(() => {\n\n    invoicesRef\n      .on('value', (snapshot) => {\n\n        var objects = snapshot.val();\n        var invoices = [];\n\n        for (var objID in objects) {\n          if (objects.hasOwnProperty(objID)) {\n            invoices.push({\n              ...objects[objID],\n              objID: objID\n            });\n          }\n        }\n\n        setInvoices(invoices);\n      });\n\n    return () => {\n      // UNMOUNTED\n      invoicesRef.off();\n    };\n\n  }, []);\n\n  return (\n    <div className='App'>\n      <h3 style={{ marginBottom: 16 }}>2ulaundry</h3>\n      <Table\n        rowKey={record => record.objID}\n        dataSource={invoices\n          .filter(invoice => invoice.status === 'pending')\n          .reverse()}\n        columns={columns}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}